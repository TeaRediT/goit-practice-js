//! Завдання з репозиторію https://github.com/GoITteacher/individual-2024/blob/TASKS/modules/module-1-2.md
//!1
// Напишіть функцію яка приймає два параметри str1 та str2. Функція повинна повернути булеве значення true
// якщо перша літера str1 дорівнює останій літері str2. В іншому випадку функція повинна повернути булеве значення false.

// const foo = (str1, str2) => str1[0] === str2[str2.length - 1];

// console.log(foo('halo', 'lohh'));

//!2
// Напишіть функцію яка приймає два параметри str1 та str2.
// Функція повинна повернути булеве значення true якщо перша літера str1 дорівнює першій літері str2.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (str1, str2) => str1[0] === str2[0];

// console.log(foo('halo', 'lohh'));

//!3
// Напишіть функцію яка приймає два параметри str1 та str2.
// Функція повинна повернути булеве значення true якщо довжина str1 дорівнює довжині str2.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (str1, str2) => str1.length === str2.length;

// console.log(foo('halo', 'lohh'));

//!4
// Напишіть функцію яка приймає число num.
// Функція повинна повернути булеве значення true якщо кількість цифр у числі парна.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = num => num.toString().length % 2 === 0;

// console.log(foo(42));

//!5
// Напишіть функцію, яка приймає два параметри num1 та num2.
// Функція повинна повернути булеве значення true, якщо num1 більше, ніж num2.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (num1, num2) => num1 > num2;

//!6
// Напишіть функцію, яка приймає два параметри num1 та num2.
// Функція повинна повернути булеве значення true, якщо num1 ділиться на num2 без остачі.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (num1, num2) => num1 % num2 === 0;

//!7
// Напишіть функцію, яка приймає число num.
// Функція повинна повернути булеве значення true, якщо num є непарним числом.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = num => !(num % 2 === 0);

// console.log(foo(3));

//!8
// Напишіть функцію, яка приймає параметр str.
// Функція повинна повернути булеве значення true, якщо str містить принаймні одну велику літеру.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = str => str !== str.toLowerCase();

// console.log(foo('gaY'));

//!9
// Напишіть функцію, яка приймає два параметри str1 та str2.
// Функція повинна повернути булеве значення true, якщо довжина str1 більше, ніж довжина str2.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (str1, str2) => str1.length > str2.length;

// console.log(foo('hay', 'gay'));

//!12
// Напишіть функцію, яка приймає рядок str.
// Функція повинна повернути булеве значення true, якщо str містить хоча б один пробіл.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = str => str.includes(' ');

// console.log(foo('ha y'));

//!14
// Напишіть функцію, яка приймає рядок str.
// Функція повинна повернути булеве значення true, якщо str є паліндромом (однаковий у зворотному напрямку).
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = str => str === str.split('').reverse().join('');

// console.log(foo('lal'));

//!15
// Напишіть функцію, яка приймає два параметри num1 та num2.
// Функція повинна повернути булеве значення true, якщо num1 менше або дорівнює num2.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (num1, num2) => num1 <= num2;

// console.log(foo(5, 10));

//!17
// Напишіть функцію, яка приймає рядок str.
// Функція повинна повернути булеве значення true, якщо перша літера str є голосною (a, e, i, o, u).
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = str => {
//   const arr = ['a', 'e', 'i', 'o', 'u'];
//   return arr.includes(str[0]);
// };

// console.log(foo('hay'));

//!19
// Напишіть функцію, яка приймає два параметри num1 та num2.
// Функція повинна повернути булеве значення true, якщо num1 і num2 рівні.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (num1, num2) => num1 === num2;

//!20
// Напишіть функцію, яка приймає число num.
// Функція повинна повернути булеве значення true, якщо num більше або дорівнює нулю.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = num => num >= 0;

//!21
// Напишіть функцію, яка приймає рядок str.
// Функція повинна повернути булеве значення true, якщо довжина str є парною.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = str => str.length % 2 === 0;

//!22
// Напишіть функцію, яка приймає два параметри num1 та num2.
// Функція повинна повернути булеве значення true, якщо num1 ділиться на 2, а num2 не ділиться на 2.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (num1, num2) => num1 % 2 === 0 && num2 % 2 !== 0;

//!23
// Напишіть функцію, яка приймає число num.
// Функція повинна повернути булеве значення true, якщо num більше 100, але менше 200.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = num => num > 100 && num < 200;

//!24
// Напишіть функцію, яка приймає рядок str.
// Функція повинна повернути булеве значення true, якщо str містить лише маленькі літери.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = str => str === str.toLowerCase();

//!25
// Напишіть функцію, яка приймає два параметри str1 та str2.
// Функція повинна повернути булеве значення true, якщо str1 є частиною str2.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (str1, str2) => str2.includes(str1);

//!26
// Напишіть функцію, яка приймає число num. Функція повинна повернути булеве значення true, якщо num є негативним числом.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = num => num < 0;

//!27
// Напишіть функцію, яка приймає два параметри num1 та num2.
// Функція повинна повернути булеве значення true, якщо різниця між num1 та num2 більше 50.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (num1, num2) => Math.abs(num1 - num2) > 50;

//!28
// Напишіть функцію, яка приймає число num. Функція повинна повернути булеве значення true, якщо num є нуль.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = num => num === 0;

//!29
// Напишіть функцію, яка приймає два параметри str1 та str2.
// Функція повинна повернути булеве значення true, якщо остання літера str1 є голосною (a, e, i, o, u).
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = (str1, str2) => {
//   const arr = ['a', 'e', 'i', 'o', 'u'];
//   return arr.includes(str1[str1.length - 1]);
// };

//!30
// Напишіть функцію, яка приймає число num.
// Функція повинна повернути булеве значення true, якщо num є кратним 10.
// В іншому випадку функція повинна повернути булеве значення false.

// const foo = num => num % 10 === 0;

//!Task 1
// Напиши скрипт, який виводить у консоль заокруглені вгору/вниз і т.д. значення змінної value.
// Використовуй методи Math.floor(), Math.ceil() та Math.round().
// Перевір що буде в консолі при значеннях 27.3 та 27.9.

// const value = 27.5;
// const foo = value => [Math.floor(value), Math.ceil(value), Math.round(value)];

// console.log(foo(value));

//!Task 3
// Напиши скрипт який переведе значення totalMinutes (кількість хвилин) рядок у форматі годин та хвилин HH:MM.

// 70 покаже 01:10
// 450 покаже 07:30
// 1441 покаже 24:01

// const foo = totalMinutes => {
//   const hours = Math.floor(totalMinutes / 60).toString();
//   const minutes = (totalMinutes % 60).toString();

//   return `${hours.padStart(2, 0)}:${minutes.padStart(2, 0)}`;
// };

// console.log(foo(70));

//!Task 4
// Отрефактори код так, щоб у змінну value присвоювалося значення змінної incomingValue,
// якщо воно не дорівнює undefined або null. У в іншому випадку має надаватися значення defaultValue.
// Перевір роботу скрипта для сліпучих значень змінної incomingValue: null, undefined, 0, false.
// Використовуй оператор "?" (nullish coalescing operator).

// const incomingValue = 5;
// const defaultValue = 10;
// const value =
//   incomingValue !== undefined && incomingValue !== null
//     ? incomingValue
//     : defaultValue;
// console.log(value);
